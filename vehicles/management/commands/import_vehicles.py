import datetime # <--- ADD THIS LINE
from django.core.management.base import BaseCommand, CommandError
from django.db import connection, transaction
import logging
# import uuid # Not strictly needed if 'id' is auto-generated by the DB

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = "Creates a fixed range of test vehicles directly in the 'vehicles_vehicle' table, providing defaults for non-nullable columns."

    # --- Configuration for this specific script ---
    OPERATOR_PREFIX = "TRAM"
    START_CODE = 2530
    END_CODE = 2565 # Inclusive
    VEHICLE_TABLE_NAME = "vehicles_vehicle" # Confirmed table name
    # ---------------------------------------------

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.NOTICE(
                f"Attempting to create test vehicles with '{self.OPERATOR_PREFIX}-' "
                f"slugs from code {self.START_CODE} to {self.END_CODE} "
                f"(inclusive) in table '{self.VEHICLE_TABLE_NAME}'..."
            )
        )

        try:
            with transaction.atomic(), connection.cursor() as cursor:
                # --- Get a valid source_id (if 'source_id' is a ForeignKey and not nullable) ---
                # Based on your image, 'source_id' is nullable, but good practice to provide if possible.
                # For this script, let's assume if it's required (e.g., via Django model constraints
                # even if DB column is nullable), you would get it.
                # If 'source_id' is NOT NULL in your Django model, you'd need to uncomment and adapt this:
                # from ...models import Source # Adjust import path as needed
                # try:
                #     source_obj = Source.objects.get(name='Guernsey')
                #     default_source_id = source_obj.id
                # except Source.DoesNotExist:
                #     self.stdout.write(self.style.WARNING("Source 'Guernsey' not found. Vehicles will be created with NULL source_id."))
                #     default_source_id = 'NULL' # Fallback
                default_source_id = 'NULL' # If 'source_id' is nullable in DB
                
                # --- Get a valid operator_id (if 'operator_id' is a ForeignKey, not nullable, or just a varchar) ---
                # 'operator_id' column type is varchar(10) and it's nullable.
                # We can just use the OPERATOR_PREFIX for this if it's a varchar.
                default_operator_id = self.OPERATOR_PREFIX.upper()


                vehicle_data_values = []
                for current_numeric_code in range(self.START_CODE, self.END_CODE + 1):
                    current_code_str = str(current_numeric_code)
                    
                    # Columns to populate based on the schema:
                    # id: Auto-generated, so we don't include it in INSERT.
                    # slug: non-nullable
                    slug = f"{self.OPERATOR_PREFIX}-{current_code_str}"
                    
                    # code: non-nullable
                    code = current_code_str
                    
                    # fleet_number: nullable (int4) - provide value
                    fleet_number = current_numeric_code
                    
                    # fleet_code: non-nullable (varchar(24))
                    fleet_code = current_code_str # Assuming this is the same as code for test data
                    
                    # reg: non-nullable (varchar(24))
                    reg = f"" # Example: TEST3011
                    
                    # colours: non-nullable (varchar(255))
                    colours = ""
                    
                    # name: non-nullable (varchar(255))
                    name = f""
                    
                    # branding: non-nullable (varchar(255))
                    branding = ""
                    
                    # notes: non-nullable (varchar(255))
                    notes = f"" # <--- NOW FIXED
                    
                    # latest_journey_data: nullable (jsonb)
                    latest_journey_data = 'NULL' # As it's nullable
                    
                    # withdrawn: non-nullable (bool)
                    withdrawn = "FALSE" # Default to not withdrawn
                    
                    # data: nullable (jsonb)
                    data = 'NULL' # As it's nullable
                    
                    # locked: non-nullable (bool)
                    locked = "FALSE" # Default to not locked
                    
                    # garage_id: nullable (int4)
                    garage_id = 'NULL' 
                    
                    # latest_journey_id: nullable (int4)
                    latest_journey_id = 'NULL'
                    
                    # livery_id: nullable (int4)
                    livery_id = 'NULL'
                    
                    # operator_id: nullable (varchar(10)) - but often used in Django
                    operator_id = f"'{default_operator_id}'" # Ensure it's quoted for SQL
                    
                    # source_id: nullable (int4) - needs to be an actual ID if linked to Source model
                    # For this script, set to default_source_id (NULL or an actual ID if uncommented above)
                    source_id = default_source_id 

                    # vehicle_type_id: nullable (int4)
                    vehicle_type_id = 'NULL'

                    # Construct the VALUES tuple.
                    # IMPORTANT: Order must match the INSERT INTO columns!
                    # Make sure all non-nullable fields are included.
                    # Use NULL for nullable fields.
                    vehicle_data_values.append(
                        f"""
                        (
                            '{slug}',
                            '{code}',
                            {fleet_number},
                            '{fleet_code}',
                            '{reg}',
                            '{colours}',
                            '{name}',
                            '{branding}',
                            '{notes}',
                            {latest_journey_data},
                            {withdrawn},
                            {data},
                            {locked},
                            {garage_id},
                            {latest_journey_id},
                            {livery_id},
                            {operator_id},
                            {source_id},
                            {vehicle_type_id}
                        )
                        """
                    )

                if not vehicle_data_values:
                    self.stdout.write(self.style.WARNING("No vehicles to insert within the specified range."))
                    return

                # Build the bulk insert SQL
                # The 'id' column is PRIMARY KEY and usually auto-generated by sequence.
                # So we list all other columns explicitly in the INSERT INTO clause.
                insert_sql = f"""
                INSERT INTO {self.VEHICLE_TABLE_NAME} (
                    slug, code, fleet_number, fleet_code, reg, colours, name,
                    branding, notes, latest_journey_data, withdrawn, data,
                    locked, garage_id, latest_journey_id, livery_id,
                    operator_id, source_id, vehicle_type_id
                )
                VALUES {','.join(vehicle_data_values)}
                ON CONFLICT (slug) DO NOTHING;
                """
                
                # Execute the bulk insert
                cursor.execute(insert_sql)
                rows_processed = cursor.rowcount 
                
                self.stdout.write(
                    self.style.SUCCESS(
                        f"Successfully processed. "
                        f"Attempted to create {len(vehicle_data_values)} vehicles. "
                        f"Inserted/Skipped {rows_processed} rows."
                    )
                )

        except Exception as e:
            raise CommandError(f"Error creating test vehicles: {e}")
